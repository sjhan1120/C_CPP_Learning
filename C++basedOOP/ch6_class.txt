[class 서론]
    class:  서로다른 형태의 변수들을 하나의 묶음으로 사용할 수 있는 구조체에
            함수를 추가하고 이들을 묶어서 하용범위를 지정할 수 있도록 기능을 확대하여 C++에 도입된 개념

    일종의 설계도인 구조체를 미리 선언하고 선언된 구조체 전체를 하나의 독립적인 객체들로 생성하여 사용하였음.
    마찬가지로 class를 선언하고 이를 근거로 각각의 독립적인 객체로 사용하기 위하여 class를 대상으로 실제 사용하는 객체로 선언하는 것을
    '객체(object)를 생성한다'라고 함. 이때 생성된 객체는 메모리에서 공간을 할당 받는데 이를 인스턴스(instance)라고함.

[class 설계]
    객체의 의미:    눈, 귀, 코, 혀, 몸 등의 감각기관으로 이루어진 사람은  각각 그 구성이 동일하지만 이를 바탕으로 태어난 사람들은
                    각각마다 독자적으로 다른 모습과 행동을 하고 있다. 이같이 독립적인 존재 자체를 객체라고 부른다.
    
    class의 의미:   아파트를 지을 때는 반드시 설계도를 먼저 작성 후 이를 바탕으로 동일한 구조의 아파트를 건설한다.
                    아파트의 구조는 같지만 그 안에 거주하는 구성원은 집집마다 다르다.
                    여기서 설계도를 class, 각각의 세대를 객체, 각 세대의 구성원을 멤버변수 혹은 멤버함수라고 부른다.
    
    객체지향프로그래밍의 특징
        1. 추상화(abstraction)      객체 지향적 관점에서 class를 정의하는 것을 추상화라고 표현하고
                                    공통의 속성이나 기능을 묶어 이름을 붙이는 것으로 설계도를 의미함.
        2. 캡슐화(encapsulation)    멤버변수와 멤버함수를 하나의 단위로 묶어 결합하는 것.
                                    객체가 요구되는 소임을 수행하기 위하여 하나의 목적으로 묶어서 처리하기 때문에
                                    class가 프로그램의 부품처럼 사용할 수 있도록 해주는 것임.
        3. 정보은닉(data hiding)    캡슐화한 묶음은 접근을 허용하지 않는 한 외부에서 접근할 수 없으며
                                    접근은 오직 함수의 매개변수를 통해서만 접근할 수 있도록 하는 것을 말함.
        4. 상속성(inheritance)      상위 class에서 선언한 멤버변수와 멤버함수의 기능을 하위 class에서 물려받는 것을 말함.
                                    상위 class를 부모 class, 하위 class를 자식 class라고도 부름.
                                    절차 지향 프로그래밍과 비교하여 객체지향프로그래밍이 가장 크게 분별 되는 특징 중 하나.
        5. 다형성(polymorphism)     부모 class에서 물려받은 함수를 자식 class 내에서 필요에 따라 변형할 수 있도록 오버라이딩 하여
                                    사용할 수 있는 것을 말함. 또한 동일한 class를 여러 개로 객체화하면 객체에 따라서 다양하게 다르게
                                    작동할 수 있는 기능이 제공됨. 즉, 상속을 이용하여 기능을 확장하거나 변경하는 것도 다형성의 특징임.

        class: 추상화를 사용자 정의 타입으로 구현하여 이를 객체화하여 사용하는 것.
    
    class 정의 방법: class 키워드와 접근제어(access control) 지시자를 함께 사용함.
        class class이름
        {
        접근제어지시자 1:
            멤버변수1 선언;         //예) int name
            멤버변수2 선언;
            ...
            멤버함수1 선언;         //예) void Func(int a, int b)
            멤버함수2 선언;
            
        접근제어지시자 2:
            멤버변수3 선언;
            멤버변수4 선언;
            ...
            멤버함수3 선언;
            멤버함수4 선언;
            ...
        };
        주의: class 선언은 마지막에 세미콜론(;)으로 마감해주어야 함.
    
    접근제어지시자: class 멤버변수와 함수에 대하여 외부에서 접근을 허용할지 여부를 지정함.
        public :        자신의 class는 물론 외부 class와 전체 함수
        protected :     자신의 class와 상속받아가는 자식 class
        private :       자신의 class 내부에서만 사용 가능(생략 가능)
    
    6_1_classBasic.cpp 참고바람...
    주의:   하나의 class에서 객체를 생성할 때 생성된 인스턴스 객체는 각각 멤버변수들이 메모리 공간에서 독립적인 위치를 차지하지만
            멤버함수는 생성된 모든 객체들이 공유한다는 점은 특이한 사항으로 기억하여야 함.

    멤버함수는 class 외부에 위치시켜도 됨. 일반적으로 멤버함수 내 코딩의 길이가 상대적으로 긴 경우에는 class 내부에는 원형함수로 선언하고
    실행하는 멤버함수의 코드는 외부에 별도로 지정하여 코딩함.
    C++응용프로그램에서는 class 선언은 일반적으로 header파일에 선언, 멤버함수는 cpp파일에서 상세한 코딩이 작성되는 것이 일반적인 구조임.
    외부에서 사용할 경우 ::를 사용하여 멤버함수가 속한 class를 표시해주어야 함.
    형식: 함수자료형 calss이름 :: 함수명(매개변수, , )

    6_2_classBasicOuside.cpp 참고바람... 

    접근제어지시자의 사용범위를 이해하기 위해 몇가지 경우를 고려해 예제 6-3에서 실습해보자

    6_3_classBasicContact.cpp 참고바람...

    -class 설계 팁
        class 이름 앞에는 C를 붙여 가독성을 높임.(생략가능)
        class는 {로 시작해서 };로 끝난다.
        접근제어지시자 허용범위
            -public: 전 영역
            -private: 자신 class 내부
            -protected: 자신 class와 상속받은 자식 class
        접근제어지시자가 생략되면 private로 동작
        멤버함수 실행 코딩 위치는 class 내부와 외부 모두 가능
        멤버함수 실행 코딩 위치 : 외부
            -class 내부에 멤버함수 원형 선언
            -소속 class :: 멤버함수
        실제사용 : 인스턴스된 객체들로 사용
            -class이름 객체명1, 객체명2,...
            -객체명 . 멤버변수
            -객체명 . 멤버함수
        객체 멤버변수는 개체마다 독립적으로 메모리 공간 할당,
        객체 멤버함수는 모든 객체들이 메모리 공간 공유.
        객체 멤버함수, 변수 접근방법
            1.  정적으로 class 객체를 생성한 경우
                객체.멤버함수();
                객체.멤버변수;
            2.  동적으로 class 객체를 생성한 경우
                객체 -> 멤버함수()
                객체 -> .멤버변수
        
[상속]
    상속(Inheritance):  기존에 정의된 class의 모든 멤버변수와 멤버함수를 물려받고 멤버변수와 멤버함수를 추가하여 새로운 class를 설계한다는 의미.
                        기존에 정의되어 있던 class를 부모 또는 기초, 상위 class라고 부름.
                        상속을 받아 새롭게 생성된 class는 자식 또는 파생, 하위 class라고 부름.
                        공통적인 부분은 부모 class에 미리 작성하여야 하고 자식 class에서 중복되는 부분은 생략함.
                        
    장점:               사용자에게 수준높은 코드의 재활용성을 제공함으로써 프로그램이 간결해지고
                        class간에 계층적 관계를 구성함으로써 다형성의 문법적 토대를 제공해줌.
    
    형식:               class 부모class명
                        {
                            // ..
                        };
                        class 자식class명 : 접근제어지시자 부모class명
                        {
                            // ..
                        };
                        접근제어지시자는 일반적으로 public을 사용함. protected를 사용하면 부모의 public으로 된 부분은 모두 protected로 변환되어 상속받음
                        private을 사용하면 전체가 private 형식으로 변환되어 상속받음.

    단일 상속:          자식 calss가 하나의 부모 class로부터 상속받음.
    다중 상속:          여러 개의 부모 class로부터 상속받음.

    -상속 팁
        상속이 가능한 부모 class 멤버변수와 멤버함수 접근제어지시자 : protected
        부모 class의 멤버변수와 멤버함수를 자식 class에서 재선언하지 않아도 사용 가능
        -사용 방법
            자식 class명 : public 부모 class 명
        
        부모 class 멤버변수와 자식 class 멤버변수가 같은 경우 자식 class 멤버변수가 우선으로 적용
        자식 class 객체에서 부모 class 멤버변수를 사용하고자 할 때 : 부모 class명::부모 class의 멤버변수

    6_4_inheritance.cpp 참고바람...
