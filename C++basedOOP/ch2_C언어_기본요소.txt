[기초정리]
    -기본문법 정리
        #include <***.h>:   컴파일러가 기본으로 제공하는 *헤더파일 사용 선언
        #include "***.h":   사용자가 정의하여 생성한 헤더파일 사용 선언
        #define A B:        A를 B로 할당.
        typedef ABCD a;:    명렁어 ABCD를 a로 약칭해서 사용
        Name(  ):           Name이라는 이름을 가진 함수
        {:                  명령어가 영향을 미치는 범위의 시작. 선언된 변수 등에 대하여 메모리 할당 시작
        }:                  명령어의 영향이 미치는 범위의 끝. 선언된 변수 등에 대하여 메모리 해제
        ;:                  1개의 명령이 완료되었음을 표시. 단, #명령어, 함수명() 다음은 예외
        

        *헤더파일: 메뉴판과 같음. 헤더파일이라는 메뉴판에 적혀있는 여러가지 함수들을 사용할 수 있음.
    
    -명령문 작성 시 사용가능 문자
        1. 숫자:        0 1
        2. 영문자:      a A
        3. 특수문자:    + -
        4. 기타:        빈칸(blank)

        C, C++에서는 대문자와 소문자를 전혀 별개의 문자로 취급됨.
        함수명 정의의 차이
            -기존 C언어: apple_type,    function_name()
            -고급 C언어: AppleType,     FunctionName()
    
[자료형]
    변수:           데이터를 지정된 메모리에 저장하고 사용하다가 저장된 데이터를 필요에 따라 바꾸어 저장할 수 있는 자료형.
                    메모리에서 임의의 공간을 차지하며 해당 위치에 데이터를 저장하거나 가져온다.
    상수:           한 번 메모리에 기억시킨 데이터를 저장하면 그 데이터를 바꿀 수 없는 자료형.
    자료형 선언:    데이터가 정수인지 혹은 실수, 문자인지 등 그 형태를 구분하고 필요한 메모리 공간을 확보하는 것.
    메모리 주소:    데이터가 저장된 위치.
    변수선언:       Instance. 독립적인 고유의 메모리 공간을 확보하는 작용. 연산자 = 를 이용함.

    -자료형 선언과 사용범위
        char            1바이트         -128 ~ 127, 또는 ASCII 문자들
        short           2바이트         -32,768 ~ 32,767
        int             4바이트         -2,147,483,648 ~ 2,147,483,647 
        long            4바이트         int와 동일
        float           4바이트         
        double          8바이트
        long double     12바이트

        unsigned: 범위를 0이상으로 바꿈. ex. unsigend int의 범위는 0 ~ 65,535

[변수]
    변수선언: 변하는 데이터를 메모리에 저장하기 위해 기억장소의 이름을 프로그래머가 선언하는 것.
        ex. int nData, nNumber;
        최대 32비트 데이터를 갖는 변수를 2개 선언.
        '컴퓨터의 주 메모리에 32x2 = 64비트의 메모리 공간을 확보하여라' 라는 Instance 명령임.
        단, 선언만 하고 아무런 값도 입력하지 않고 호출할 경우, 할당된 메모리 안에는 어떠한 데이터도 없으므로 쓰레기 값이 나옴.

    팁1: 변수값이 정수면 n, 실수면 f, 문자면 ch, 문자열이면 str을 붙이면 어떤 자료형인지 쉽게 파악가능.
    팁2: C++에서 추가된 선언 기능: int nValue(100);
    팁3: auto기능. 변수 선언 후 초기화를 하면 변수 자료형이 초기값에 따라 자동으로 정해짐
        ex. auto a = true;   <-bool
            auto d = 3;      <-정수형

[기본 데이터 입출력]
    C언어의 입출력 함수:    scanf(), printf()
    C++의 입출력 함수:      cin, cout

    -printf(), scanf()에서 사용하는 데이터의 형식
        정수:       %d
        실수:       %f
        문자:       %c
        문자열:     %s
        16진수:     %x
        8진수:      %o
        지수 형태:  %g
        e와 f 포맷 중 선택:     %g
    
    -데이터 출력
        printf() 함수 사용 예:   printf(" 오늘은 %d월 %d일 입니다.", 3, i);   //int i = 14
        cout 사용예:            cout << "오늘은" << 3 << "월" << i << "일 입니다." << endl;
            2_1_IO.cpp 참고바람...

        C++에서 사용하는 iostream은 C언어에서 사용하는 stdio.h 헤더파일의 기능을 C++에서 확장한 데이터 및 파일의 입출력 기능을 제공함.

        namespace:  함수의 이름이나 구조체의 이름 등이 같아져 오류가 생기는 것을 방지하기 위해 namespace가 만들어짐.
                    함수나 구조체 혹은 변수 이름 등의 소속을 정해주는 것.
                    ex. using namespace std     <-std라는 class 라이브러리에 있는 멤버함수 등을 사용하겠다고 선언하는 것.
    
        C, C++에서는 10진수, 16진수 등의 값을 직접 입력하여 사용할 수 있도록 형식이 주어져 있음.
        16진수를 정수형 변수에 할당할 때는 숫자 앞에 0x를 붙임
            2_2_IO2.cpp 참고바람...
    
    -데이터 입력
        C언어의 scanf() 함수 사용 예:   scanf("%d, %d", &i, &j);     <-i, j는 변수
            2_3_IO3.cpp 참고바람... <-scanf함수 vscode에서 정상작동 하지 않음. 나중에 다시 확인해볼 것.
        
        C++의 cin 사용 예:             cin >> i >> j;               <-i, j는 변수

[문자열 처리]
    ASCII:          미국 국립 표준 협회(ANSI)에서 표준화한 정보교환용 7비트 부호체계
                    영문 알파벳을 사용하는 대표적인 문자 *인코딩
    *문자인코딩:     사용자가 입력한 문자나 기호들을 컴퓨터가 이용할 수 있는 신호로 만드는 것.
                    복잡한 신호를 0과 1의 디지털 신호로 변환하는 것.
    -인코딩 방식
        유니코드(unicode) 인코딩 방식
            각종 문자들을 인코딩할 수 있도록 정해진 국제 표준.
            UTF-8:  영문자 1byte 기반
            UTF-16: 영문자 2byte 기반
            UTF-32: 모든 글자 4byte 기반으로 처리
            
        멀티바이트(multibyte) 인코딩 방식
            MS사의 VIsual Studio에 적용되는 방식.
            프로그램에서 문자를 사용할 때 1byte 인코딩(single byte code system)을 사용할지,
            2byte 이상(multi byte code system)의 인코딩을 사용할지 사용자가 먼저 정하는 방식
    
    문자열(string)
        1개 이상의 문자를 의미. 이중 인용부호("문자열")를 사용함
        널(NULL): 문자열을 구분하기 위한 문자. 문자열 마지막에 자동으로 1Byte 추가됨. 문자열의 끝을 인식함.
    
    문자열을 변수로 지정하는 4가지 방법
        1. char 배열
            문자가 저장되는 메모리 byte의 개수보다 1개 크게 배열의 개수를 설정하여 문자열을 저장하는 방법.
            
            ASCII문자:          글자 x 1 byte의 메모리 크기를 지정
            UTF-8 한글:         (글자수 x 3) + 1byte의 메모리 크기를 지정
            visual studio 한글: (글자수 x 2) + 1byte의 메모리 크기를 지정

            sizeof()함수를 이용해 메모리 크기 파악 가능.

            2_5_char.cpp 참고바람...
        
        2. string class (C++에서 추가됨)
            C++의 std::string class 라이브러리는 문자열을 더욱 쉽게 사용할 수 있도록 다양한 함수들이 제공됨.

            자세한 내용은 인터넷 검색어 "c++ string class"를 통해 추가 학습 할 것.

            2_6_stringClass.cpp 참고바람...

        3. string.h 함수
            string class가 제시되면서 사용빈도는 줄었지만 유용한 몇가지 기능들이 있음.
            
            strcpy(문자열1, 상수 문자열2)
                -원형: char* strcpy(char* dest, const char* origin);
                -의미: 문자열1에 상수 문자열을 복사
            
            strcat(문자열1, 상수 문자열2)
                -char* strcat(char* dest, const char* origin);
                -문자열1 뒤쪽에 문자열2를 이어붙여 문자열1에 저장
            
            단 Visual studio에선
                strcpy( , ) --> strcpy_s( , )
                strcat( , ) --> strcat_s( , )
                로 바꾸어 사용해야 함.
            
            팁:     #include <abcd.h> = #include <cabcd>
                    이처럼 헤더이름 앞에 c를 추가해 .h를 생략할 수도 있다.

            자세한 내용은 인터넷 검색어 "c string.h"를 통해 추가 학습 할 것.

            2_7_stringH.cpp 참고바람
        
        4. pointer
            상수로 지정된 문자열을 사용하는 경우에 주로 사용함.
            문자열을 1차원 배열로 선언하는 방법과 비교하면 pointer로 문자열을 선언하면 배열의 차수가 1개 감소하는 특징이 있음.

            2_8_pointer.cpp 참고바람...

[연산자]
    -산술 연산자
        +,-,*,/ :   더하기, 빼기, 곱하기, 나누기
        ++, -- :    숫자 1 증감 연산자
            nA=10;
            nA++;   <- nA값은 11
        % :         정수/정수의 나머지
    
    -대입 연산자
        A = B;      <- 데이터 B 값을 A에 저장하라
        nA = 10;    <- 10을 변수 nA에 할당
    
    -관계 연산자
        분기, 반복문에서 조건 성립 판정을 위한 명령어

        >       초과        A>B       A가 B보다 큰가?
        <       미만        A<B       A가 B보다 작은가?
        ==      동일        A==B      A가 B와 같은가?
        >=      이상        A>=B      A가 B보다 같거나 큰가?
        <=      이하        A>=B      A가 B보다 같거나 작은가?
        !=      같지 않다   A!=B      A가 B와 비교하여 다른가?

    -bit 연산자
        shift 연산자:   정수 값을 2진수로 변환하였을 떄의 2진수 데이터 값을 좌측 혹은 우측 방향을 주어진 비트 수만큼 이동시키는 것.
                        만약 데이터가 8bit 데이터라면 양끝단을 넘어서는 데이터는 손실되고 새로 추가되는 데이터는 0으로 채워짐.

            <<  비트를 좌로 이동    B=A<<2;     A를 2비트 좌로 이동시켜 B에 대입한다.
            >>  비트를 우로 이동    B=A>>2;     A를 2비트 우로 이동시켜 B에 대입한다.
        
        &(AND), |(OR), ^(XOR) 연산자
            &: 모든 bit가 1인 경우에만 1의 결과를 보임. 특정 bit의 신호만 제거(masking)하고자 할 때 주로 사용함.
            |: 2개의 bit중 어느 하나만이라도 1이면 1을 출력하는 것을 말함.
            ^: bit끼리 다르면 1의 결과를 줌. 임베디드 프로그래밍에서 두개의 디지털 신호 bit끼리 신호가 같은지 다른지를 비교할 때 많이 사용.
        
        ~(보수)연산자:  정수값을 2진수로 변환하였을 때 각 비트마다 1은 0으로 0은 1로 바꾸어 줌.
    
    -대입 할당 연산자
        +=: A = A + B
        -=: A = A - B
        *=: A = A * B
        /=: A = A / B
        %=: A = A % B
        <<=: A = A << B
        >>=: A = A >> B
        &=: A = A &= B
        |=: A = A |= B
        ^=: A = A ^= B
    
    -논리 연산자
        분기, 반복문에서 다수의 조건을 검색하는데 사용되는 연산자
        &&: 좌우 모두 참이면 1
        ||: 좌우 중 하나가 참이면 1
        !: 참이면 0, 거짓이면 1
    
    -연산자 우선순위
        1순위         괄호, 구조체         (), [], ->, .
        2순위         단항                 !, ~, ++, --, -, &, *, size of
        3순위         산술                 *, /, %, +, -
        4순위         이동                 >>, <<
        5순위         관계                 <, <=, >, >=, ==, !=
        6순위         비트 논리            &, ^, |
        7순위         논리                 &&, ||

[제어문(if, switch)]
    제어문 또는 조건문: 프로그램이 순서대로 실행되는 도중에 조건에 따라 특정 문장을 선택적으로 실행하고 싶을 때 사용하는 명령
    함수:       if-else, switch()
    분기 명령:  break, continue, return
    
    -if문---------------------------------------------
        if (조건식)
        {
            실행문-1;   //조건이 참이면 실행
            실행문-2;
                :
        }
        실행문-p
    
    -if-else------------------------------------------
        if (조건식)
        {
            실행문-p1;   //조건이 참이면 실행
            실행문-p2;
                :
        }
        else
        {
            실행문-q1;   //조건이 거짓이면 실행
            실행문-q2;
                :
        }
    
    2_9_ifelse.cpp 참고바람...

    -if-else if--------------------------------------
        if (조건식)
        {
            실행문-1;           //조건식-1이 참이면 실행 그리고 실행문-z로
        }
        else if (조건식-2)
        {
            실행문-2;           //조건식-1이 거짓이고 조건식-2가 참이면 실행 그리고 실행문-z로
        }
            :
            :
        else if (조건식-n)
        {
            실행문-n;           //위 조건식이 모두 거짓이고 조건식-n이 참이면 실행 그리고 실행문-z로
        }
        else{
            실행문-p            //위 조건식이 모두 거짓이면 실행 그리고 실행문-z로
        }
        실행문-z;
        
        if-else 조건문에서 각각의 실행문이 1개일 경우 {} 생략 가능: if (조건식)     실행문-p1;

        2_10_ifelseif.cpp 참고바람...
    
    -switch-case 문----------------------------------
        switch가 지정하는 case 문을 찾아서 실행되도록 분기하는 방법

        switch(변수)
        {
            case 변수값-1 : 실행문-1; break;
            case 변수값-2 : 실행문-2; break;
                        :
            case 변수값-n : 실행문-n; break;
            default:        실행문-p;
        }

        -switch()문 팁
            1. switch(변수): 조건 변수의 값은 정수형 데이터 또는 문자
            2.  switch(변수)에서 변수의 값과 case문에서의 변수값이 일치하는 실행문을 실행하고 이하 전체 실행문도 실행하게 됨.
                즉 대응하는 case 문장부터 이하 실행문은 모두 실행함.
            3. 이하 프로그램을 실행하다가 break 문을 만나면 switch 문을 탈출가능.
            4. 만일 switch() 조건의 변수의 값과 일치하는 case 변수값이 없으면, default에 해당하는 문장 실행
            5. default는 필요 없을 때 생략 가능
            6. case 문에서는 실행문이 여러개라 하더라도 중괄호를 사용하지 않아도 됨. 변수값은 수식의 결과가 정수이거나 문자 1개인 경우도 적용됨.
            7. case문에 대응하는 실행문이 긴 경우는 다음 줄에서 이어서 작성함.
        
        2_11_switchcase.cpp 참고바람...

[반복문(While, do-While, for)]
    주어진 조건이 만족되는 동안은 해당 실행문을 무한히 반복하여 실행하고자 할 때 사용하는 명령어.

    -while(), do-while() 문
        while(조건) {실행문} : 조건이 참일 때 실행문들이 차례로 실행하고 다시 조건을 검색함. 조건이 거짓이면 빠져나감

        while(조건)
        {
            실행문-p1;
                :
            실행문-p2;
        }

        2_12_while.cpp 참고바람...

    -do~while(조건); :  아래 { }로 둘러싼 문장을 무조건 실행하고 while(조건)문에서 조건을 검색하여 조건이 만족되면 다시 { } 로 둘러싼 문장을 반복 실행.
                        거짓이면 반복문을 빠져나옴. 이 문장은 최소한 한번은 실행하게 됨.

        do
        {
            실행문-p1;
                :
            실행문-p2;
        } while (조건);

        2_13_dowhile.cpp 참고바람...
    
    while()문을 사용하는 사례들
        1.  마이크로프로세서에서 외부에서 통신 데이터를 입력받을 때 전송된 데이터가 주어진 조건을 만족하지 않으면
            조건이 성립될 때까지 반복적으로 데이터를 입력받는 동작을 함.
        2.  마이크로프로세서 Firmware프로그램을 코딩할 때 main()에서는 항상 무한 반복문을 구현하여야 함.
        3.  프로그램을 코딩하고 특정 위치까지만 디버깅하고자 할 때 유용하게 사용함.
            while(1)을 이용해 이하 문장으로 빠져나가지 못하게 하여 프로그램을 멈추게 하는 효과를 얻을 수 있음.
    
    -for()문
        for( 초기값1 ; 조건식2; 증감분3 )
        {
            실행문-1;
            실행문-2;
                :
            실행문-n;
        }

        -for()문 팁
            1.  초기값으로 조건식을 검색.
            2.  조건식의 결과가 참이면[0이 아니면], { }로 둘러싼 실행문을 실행함.
                거짓이면 for() 실행문을 빠져나옴.
            3.  증감분 만큼 초기 값을 변경시키고 2의 과정을 반복함.
            무한반복문은 for(;;;)로 구현가능.

        2_14_for.cpp 참고바람...
        2_15_for2.cpp 참고바람...

    -분기 명령
        continue문: continue 이하 문장을 실행하지 않고 반복문의 처음 조건을 다시 실행함.
        break문 :   { } 실행문 내에서 빠져나감.
        return :    함수 자체를 빠져나감.
        
        2_15_cbr.cpp 참고바람...

        



        
    

        