[책]
    제목: C++기반 객체지향 프로그래밍
    저자: 김근식

[C를 알고 있어야 하는 이유]
    C++은 C언어를 확장하여 class를 기반으로 하는 객체지향 프로그래밍과 템플릿을 포함한 것임. 따라서 C언어의 핵심부분을 기억하고 있어야함.

[C++의 역사]
    C언어 장점: 하드웨어를 직접 제어할 수 있음.
    C언어 단점: C언어는 *절차적 프로그래밍. 프로그램 코드가 복잡해질 수록 오류를 찾아내기 힘든 한계가 있음.
    해결책: C언어에서 객체의 개념으로 사용 되고 있는 구조체를 확장하여 class라는 새로운설계도 개념을 제시.
    이를 바탕으로 C언어는 이 class라는 설계도를 근거로 실제 실행하는 코드를 생성하는 *객체 지향형 프로그램인 C++언어로 발전함.

    *절차적 프로그래밍:      루틴, 서브루틴, 메소드, 함수 등을 이용한 프로그래밍 패러다임.
                            *프로시저와 프로시저의 입출력을 다루는, 프로시저를 이용한 프로그래밍을 한다는 것.
    *프로시저:               어떤 행동을 수행하기 위한 일련의 작업 순서, 절차. 함수들의 실행을 바탕으로 하는 일련의 작업을 수행하는 것.
                            함수를 사용함으로써 얻어지는 재사용성에 초점을 두고 있음. 함수형 프로그래밍과 동일하게 봐선 안됨.
    *객체지향 프로그래밍:    프로그래밍에서 필요한 데이터를 추상화 시켜 상태와 행위를 가진 객체로 만들고,
                            객체들간의 상호작용을 통해 로직을 구성하는 프로그래밍 방법

[C언어의 특징]
    1. 명령이 절차적으로 동작하고, 구조체와 함수 등을 포함하고 있어 프로그램 구현이 수월함
    2. 하드웨어를 직접 제어 가능
    3. 모든 운영체제 OS환경으로부터 영향을 받지 않아 자유로움.
    4. 포인터를 이용한 메모리 프로그램의 효율적 개발
    5. C언어를 숙지하면 객체지향형 고급언어인 C++, 윈도우프로그래밍 등을 쉽게 학습 가능.

[C언어 기본 구성]
    -기본적으로 함수들의 집합. 모든 함수에서 프로그램은 { 로 기능을 시작해 } 로 메모리에서 해제되어 기능을 마침
    -프로그램에서는 main() 함수가 반드시 하나 있어야함.
    -프로그램 명령어는 영문 소문자가 기본. 변수를 사용할 때 대소문자를 구분하므로 대소문자를 사용할 때 주의하여야 함.
    -명령어는 ; 로 구분.
    -문장 앞에 #이 붙는 경우와, 함수명 뒤에는 ; 를 붙이지 않음.

