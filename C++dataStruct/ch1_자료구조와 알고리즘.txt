[자료구조]
    자료구조: 컴퓨터에서 자료들을 정리하고 조직화 하는 여러가지 구조들.
    -자료구조의 분류
        선형(linear data structure):       자료들이 순서적으로 나열됨.
            ex. 배열, 연결리스트, 스택, 큐, 덱
        비선형(non-linear data structure): 자료들 간 선형적 순서가 없고 복잡한 연결을 갖는 형태임.
            ex. 트리, 그래프
    자료구조의 활용: 자료들의 정렬과 자료 탐색.

[알고리즘]
    알고리즘: 어떤 문제를 해결하는 절차.

    프로그램 = 자료구조 + 알고리즘

    -알고리즘 기술방법
        영어나 한국어와 같은 자연어
        흐름도(flowchart)
        유사코드(pseudo-code)
        특정한 프로그래밍 언어(C언어, C++, java 등)

[추상 자료형]
    추상화(abstraction)           : 복잡한 자료, 모듈, 시스템 등으로부터 핵심적인 개념이나 기능을 간추려 내는 것.
    추상자료형(information hiding): 추상화한 자료형. 자료의 집합과 자료에 가해지는 연산들의 집합에 대한 수학적인 명세.
    정보은닉(information hiding)  : 구현에 관한 세부사항들은 외부에서 모르게 하고 외부에는 간단한 인터페이스만을 공개함. 구현으로부터 명세의 분리

    추상자료형의 개념은 객체지향의 개념과 정확히 일치함. ex.C++, Java

[알고리즘의 성능 분석]
    효율적인 알고리즘: 전체 실행 시간이 짧고 메모리와 같은 컴퓨터의 자원들을 적게 사용하는 알고리즘.
    ㄴ실행시간이 빠름, 처리를 위해 필요한 기억 공간이 적음.

    실행 시간을 측정하는 프로그램의 예: 1_2_CheckClock 참고바람...

[알고리즘 복잡도 분석]
    Complexity Analysis: 구현하지 않고도 모든 입력을 고려하는 방법으로 실행 하드웨어나 소프트웨어 환경과는 관계없이 알고리즘의 효율성을 평가 가능.

    -시간복잡도 함수
    연산의 수를 n의 함수로 나타낸것.
    알고리즘을 이루고 있는 연산들이 몇번이나 실행되는지를 숫자로 표시.
    n의 증가에 따른 함수T(n)의 최종값이 가장 적은게 효율적인 알고리즘으로 판단함.

    단점: n이 커질수록(자료의 개수가 많을수록) 차수가 가장 큰 항의 영향이 절대적이게 됨. 즉, 함수의 전체 항이 아니라 최고차항만을 고려하게 됨

    -빅오 표기법    O(n)
    n에 따른 함수의 상한값.
    시간복잡도 함수에서 불필요한 정보를 제거하여 알고리즘 분석을 쉽게 할 목적으로 시간복잡도를 표시하는 방법.
    시간복잡도 함수의 증가에 별로 기여하지 못하는 항을 생략해 간단히 표시 가능.
    입력의 개수에 따른 시본 연산의 수행 횟수를 개략적으로 나타낸것.
    
    모든 n>=n0>0에 대하여 0<=f(n)<=k*g(n)인 양의상수k와 n0이 존재하면
    f(n)=O(g(n))이다.

    단점: 

    -최선, 평균 최악의 경우
    알고리즘의 효율성은 주어지는 자료 집합에 따라 다음의 3가지 경우로 나누어서 평가가능
    최선의 경우:    실행시간이 가장 적은 경우.
    평균적인 경우:  모든 입력을 고려하고 각 입력이 발생하는 확률을 고려한 평균적인 실행시간을 의미
    최악의 경우:    자료 집합중에서 알고리즘의 실행시간이 가장 오래 걸리는 경우. 가장 중요하게 사용됨.
