[1.2.1 intrinsic type(내장 형식), 1.2.2 character & string (문자와 문자열)]

        [내장 형식]
        char            문자와 아주 짧은 정수               8bit => -128 ~ 127 / 0 ~ 255
        short           꽤 짧은 정수                       16bit
        int             보통의 정수                        32bit
        long            긴 정수                            32bit
        long long       아주 긴 정수                       64bit
        unsigned        위의 정수들의 부호 없는 버전들
        signed          위의 정수들의 부호 있는 버전들
        float           단정도 부동소수점 수                32bit
        double          배정도 부동소수점 수                64bit
        long double     긴 부동소수점 수                    128bit
        bool            부울 값(참 또는 거짓)



        char - short - int - long - long long 오른쪽 타입은 왼쪽 타입보다 적어도 짧지 않다.
        float - double - long double - bool 오른쪽 타입은 왼쪽 타입보다 적어도 짧지 않다. 
        signed, unsigned는 부호를 결정함.
        bool은 논리적 참, 거짓 값. true 혹은 false를 담을 수 있음.
        최대값을 초과하면 최소값이 됨. 예를들어 short의 경우 32767이 최대이므로 32768을 변수로 정하면 -32768이 됨.



[1.2.3 변수선언]
        조언:   변수는 최대한 늦게 선언하라. 보통은 처음 상요하기 직전에 선언하는 것이 바람직하다.
                단, 변수를 초기화 할 수 있는 지점 이후이어야 한다.

        auto i4 = i3 + 7;
        위와 같은 문장에서 i4는 i3, 7과 같은 int임. 이후 배정되는 모든것도 int로 변환됨.



[1.2.4 constant(상수)]
        상수성이라는 추가적인 특성을 가진 특별한 변수.
        const int ci1 = 2;
        const int ci3;        <-얘는 오류. 값이 없기 때문.

        상수는 변할 수 없으므로, 선언할 떄 반드시 값을 지정해야 함.
        값이 컴파일 시점에서 이미 알려지기 때문에 다양한 최적화가 가능하다는 이점이 있음.

[1.2.5 literal(값 자체)]
        데이터의 그 자체. 변수에 넣는 변하지 않는 데이터.
        int a = 1;      <- 여기서의 리터럴은 1이 된다.
        즉, 1과 같이 변하지 않는 데이터(bool, char, double, int, etc...)를 리터럴이라고 부른다.

        [접미사를 이용한 리터럴 표기]
        2       int
        2u      unsigned
        2l      long
        2ul     unsigned long
        2.0     double
        2.0f    float
        2.0l    long double

        -리터럴 형식에 신경 써줘야 하는 이유 4가지
        1. 가용성: 서로 다른 형식끼리의 연산이 불가능함
                ex. int * complex<float> 연산은 없음.
        2. 중의성: 0과 같은 인수는 다수의 수치 형식으로 해석할 수 있어서 중의성 문제가 발생
                ex. 0u처럼 접미사로 한정된 인수는 특정한 하나의 형식에 대응되므로 중의성 없음.
        3. 정확성: 한정되자 않은 실수 리터럴은 double이므로, long double 변수에 그런 ㄱ리터럴을 배정하면 유효숫자들이 소실될 수 있다.
                ex. long double thrd1 = 0.333333333333;         <-유효숫자들이 소실될 수 있음.
                ex. long double thrd2 = 0.333333333333l;        <-정확함
        
        진수의 표현
        8진수: 숫자 0으로 시작하는 정수.
                int o1 = 042;           <-int o1 = 34;
        16진수: 0x 혹은 0X로 시작함.
                int h1 = 0x42;          <-int h1 = 66
        2진수: 0b 혹은 0B
                int b1 = 0b11111010;    <- int b1 = 250;

        접미사 없는 문자열 리터럴은 char의 배열이 된다. 하지만 이런 배열은 다루기가 아주 불편하니 string형식의 객체를 사용하는게 좋다.
        string 객체는 다음과 같이 문자열 리터럴로 직접 생성할 수 있다.
        #include<string>
        std::string s2 = "In C++ better like this";

        여러개의 문자열 리터럴로 분할해서 지정할 수도 있음.
        std::string s3 = "This is a very long and clumsy text";
                         "that is too long for one line.";
        
        s2, s3 둘다 형식이 string이지만 const char[] 형식의 리털로 초기화 되었음을 주목하자. 컴파일러가 형식을 연역하는 경우에 문제가 될 수 있다.
        접미사 s를 이용해서 string 형식의 리터럴을 직접 지정할 수 있다.
        f("I'm not a string");          <-const char[] 형식의 리터럴
        f("I'm really a string"s);      <-string 형식의 리터럴

[1.2.6 narrowed conversion error(좁아지지 않는 초기화)]
        소스코드 : narrowed 참고.

[1.2.7 scope(범위)]
        scope(범위)는 (정적이아닌) 변수와 상수의 lifetime(수명)과 visibility(가시성)을 결정하며,
        프로그램의 구조를 확립하는데 기여함.

        global variable(전역변수): 모든 함수의 바깥에서 선언됨.
                장점: 코드의 어디에서나 사용가능.
                단점: 언제 어디서 변경되는지 추적하고 관리하기 힘듦.
                조언: 전역 변수는 사용하지 말라.
                예외: 전역 상수는 괜찮음. 상수는 변경할 수 없으므로 부작용 없음.
                        ex. const double pi = 3.1415...
        local variable(지역변수): 함수의 body(본문)안에서 선언됨.
                가시성/가용성은 선언문이 있는 지점에서 시작해서 그 선언문을 포함한 블록을 닫는 중괄호에서 끝남.
        hide(이름 가리기): 바깥 번위에 있는 변수와 같은 이름의 변수를 안쪽 범위에서 선언하면 바깥쪽 범위의 변수는 더이상 보이지 않는다.
                소스코드 hide.cpp 참고

        scope(범위)의 장점: 어떤 변수를 선언할 때 같은 이름의 변수가 범위 밖 어딘가에서 이미 정의되어 있는지 걱정할 필요 없음.
        scope(범위)의 예외: static으로 선언된 변수(정적변수)는 실행의 마지막 순간까지 살아있지만 해당 범위 안에서만 보임.

[1.3 operator(연산자)]
        prefix operator(전위연산자): 증가나 감소를 먼저 수행해서 수정된 값을 돌려줌
        postfix operator(후위연산자): 먼저 기존 값을 돌려주고 증가나 감소를 나중에 수행함
                ex.     int i = 3, j = 3
                        int k = ++i + 4;        <-i는 4, k는 8
                        int l = j++ + 4;        <-j는 4, l은 7
        
        단항 마이너스: 피연산자를 negation(부정)한 결과를 돌려줌. 단항 플러스는 산술에 아무런 영향도 미치지 않음.
                ex.     int i = 3;
                        int j = -i;             <-j는 -3
        
        곱하기, 나누기: *,/,%. %는 나머지를 줌. /는 두 인수가 정수이면 결과의 소수부가 절단됨. %는 나머지를 돌려줌.
        
        덧셈, 뺄샘

        이항연산의 인수들이 형식이 다르면 둘 중 하나 또는 둘 다가 하나의 공통 형식으로 변환됨.
        이러한 변환 때문에 데이터의 정밀도가 소실될 수 있음.
                ex.     long l = 1234567890123;
                        long l2 = l + 1.0f - 1.0;       <-부정확함 12345679544631
                        long l3 = l + (1.0f - 1.0);      <-정확함   1234567890123
        
        boolean operator(부울 연산자): 논리연산자와 관계연산자로 나뉨.
                논리연산: !(부정)(not을 써도 됨.), &&(AND 논리곱), ||(OR ||)
                관계연산: >, ==, !=, <=> 등등..

        bitwise operator(비트단위 연산자): 정수 형식의 개별 비트를 검사하거나 조작하는데 쓰임.
                ~x: 1들의 보수
                <<, >>: 왼쪽 또는 오른쪽으로 자리이동
                &, ^, |: AND, XOR, OR

                이부분 어려움. 여기 동영상으로 좀더 공부해야함.
        
        assignment operator(배정 연산자): 객체(수정 가능한 왼값)의 값을 설정함.
                =: 단순배정.
                *=, /=: 곱하기, 나누기배정. 좌항과 우항을 곱하거나 나누거나 나눈 나머지를 좌항의 값으로 설정
                -=, +=: 더하기, 빼기 배정. 좌항과 우항을 더하거나 뺀 값을 좌항의 값으로 설정
                <<=, >>=: 왼쪽, 오른쪽 자리이동 배정.
                &=, |=, ^=: 논리곱(AND), 논리합(OR), XOR 배정.
        
        program flow(프로그램 흐름): 프로그램의 흐름을 제어하는 연산자가 세 개 있다.
                1. fuction call(함수호출)
                2. 조건부 연산자 c ? x : y: 조건c를 평가해 그것이 참이면 x를, 거짓이면 y를 돌려줌.
                        if문 대신 사용할 수 있음.
                3. comma operator(쉼표 연산자): 평가의 우선순위를 강제함.
                        반드시 왼쪽에서 오른쪽으로 하나씩 차례로 평가됨. 전체 표현식의 값은 가장 오른쪽 부분식의 값임.
                        
                        ex. 3 + 4, 7 * 9.3      <-결과는 65.1
                        장점: 쉼표 연산자를 이용해 오직 하나의 표현식만 허용되는 장소에서 여러 개의 표현식을 평가가능.
                        주의: 쉼표 연산자가 있는 표현식을 함수의 인수로 사용할 경우 표현식 전체를 괄호로 감싸야 함.
                        안그러면 쉼표가 함수 인수들을 분리하는 기호로 해석됨.
        
        메모리 관리: 연산자 new, delete는 각각 메모리를 allocation(할당)하고 deallocation(해제)함.
                포인터를 알아야 이해가능.

        access operator(접근 연산자): 객체의 멤버 접근, 변수의 메모리 주소 취하기, 주소가 가리키는 곳에 있는 값 접근하기 등등..
                포인터와 클래스를 알아야 이해가능.

        형식 처리: 형식들을 연산의 대상으로 삼는 연산자들.
                5장에서 자세히 다룰 것.
                ex. sizeof(x), sizeof x: 객체의 크기를 확인함. 이 연산자는 피연산자가 표현식인 경우 괄호 생략 가능.
        
        오류 처리: ex: throw 연산자: 실행에서 예외가 발생했음을 나타냄.
                1.6.2에서 자세히 다룰 것.
        
        operator overloading(중복적재): 프로그래머가 새로운 사용자 정의 형식에 대한 연산자를 직접 정의할 수 있음.
                2.7에서 자세히 다룰 것.
                
                중복적재 할 수 없는 연산자들도 있음.
                        ex. ::, ., .*, ?:, sizeof, sizeof..., slignof, typeid
                
        연산자 우선순위
                https://see-ro-e.tistory.com/12 참고. 여기는 간략하게 나온거고 class, pointer 등 더 자세하게 나온거도 참고바람.
        
        side effect(부수 효과)의 위험: 부수 효과는 함수가 만들어진 목적과는 다른 효과 또는 부작용을 뜻함.
                함수에 예상할 수 없는 일이 생길 가능성이 존재한다면 이 함수는 부수 효과를 가질 수 있는 함수가 됨.

                우변의 표현식에 부수효과가 없으면 사람이 프로그램의 행동을 이해하기 쉬울 뿐만 아니라 컴파일러가 코드를 최적화하는 데에도 도움이 된다.
                일반적인 원칙은, 사람이 이해하기 쉬운 프로그램일 수록 컴파일러가 코드를 최적화하기도 쉽다는 것이다.
                        ex. const 선언은 우발적인 수정을 방지해 줄 뿐만 아니라 컴파일러가 코드를 좀더 적극적으로 최적화할 여지를 제공함.

[1.4 expression & statement(표현식과 문장)]
        expression(표현식)
                -모든 변수 이름(x, y, z), 상수, 리터럴
                -표현식들을 연산자로 결합한 것(x + y)
                -배정 연산(x = y + z)
                -입출력 연산(std::cout << "x is" << x << "\n")
                -함수 호출(abs(x + y + z))

                표현식을 길게 쓰면 가독성이 떨어 질 수 있음.
        
        statement(문장)
                표현식 다음에 세미콜론을 붙이면 문장이 됨.(x = y + z;)

                empty statement(빈 문장): 세미콜론 하나만 있는 문장.
                compound statement(복합문): 여러 문장을 중괄호로 감싼 것.

        조건부 연산자를 제외할 때, 프로그램의 흐름은 문장들로 제어된다. 흐름의 제어는 크게 분기와 루프로 나뉜다.

        branching(분기=조건문)
                -if문
                        조건식이 참일 때의 갈래와 거짓일 떄의 갈래로 분기함.
                        조건식이 참이 아닐 때 딱히 할 일이 없다면 else절을 생략해도 됨.
                        if문의 각 갈래는 각자 하나의 범위를 형성함. 따라서 if문 안에서 변수를 정의하면 if문 밖에선 그 변수를 사용 불가능.
                        가독성을 위해 중괄호를 사용하고 중괄호 안의 문장들을 들여 쓰는 것이 좋음.
                
                -conditional expression(조건부 표현식)
                        조건식 ? 참일 때의 결과 : 거짓일 때의 결과 (min = x <= y ? x : y;)
                        표현식 전체의 결과는 조건식이 참이면 참일 때의 결과를, 아니라면 거짓일 때의 결과이다.
                        if (x <= y)
                                min = x;
                        else
                                min = y;
                        
                        조건부 표현식을 변수를 초기화하는 데 사용할 수 있음.
                        int x = f(a),
                                y = x < 0 ? -x : 2 * x;

                        인수를 조건에 따라 선택해 함수를 호출할 조건부 표현식을 이용하면 코드가 간결해짐.
                        f(a, (x < 0 ? b : c), (y < 0 ? d : e));

                -switch문
                        여러가지 정수 값에 따라 서로 다른 계산을 수행하는 코드를 간결하게 표현 가능.

                        switch(op_code) {
                                case 0: z= x + y; break;
                                case 1: z= x - y; cout<< "compute diff\n"; break;
                                case 2: 
                                case 3: z= x * y; break;
                                default: z= x / y;
                        }
                        주의: break가 없으면 실행이 아래로 흘러가 나머지 case 절들도 실행됨.
                        
        loop(반복문)
                -while 루프와 do-while 루프
                        loop.cpp 참고

                        while은 조건이 만족되지 않으면 실행 안함. do-while은 조건이 만족되지 않아도 적어도 한번은 실행함.
                -for 루프
                        c++에서 가장 자주 쓰이는 루프
                        loop.cpp참고
                        
                        루프의 서두는 다음 세 요소로 구성
                                1. 초기화 절
                                2. 조건식
                                3. 단계 연산

                                초기화절에서는 흔히 루프 색인으로 사용할 변수를 새로 선언하고 0으로 초기화
                                조건식은 루프 반복 여부를 결정
                                단계 연산은 루프 색인을 증가함.
                        
                        초기화 절에는 모든 종류의 표현식과 변수 선언을 사용할 수 있고 아예 비워둘 수도 있다.
                                ex. for(int i = begin(xyz), e = end(xyz); i < e; ++i) ...
                        단계연산에서 루프 색인을 여러개 증가할 수도 있고, 색인을 반드시 1씩만 증가해야 하는 것도 아니다.
                                ex. for(int i = 0, j = 0, p = 1; ...; ++i, j += 4, p *= 2)...
                
                        range-based for-loop(구간 기반 for 루프)
                                배열이나 기타 컨테이너의 모든 요소를 훓는 코드를 아주 간결하게 표현하는 수단.
                                iteraor(반복자) 배울 때 자세히 다룸.
                        
                        루프 제어
                                루프의 정상적인 실행 흐름을 인위적으로 제어하는 문장 2개
                                        1. break 문:    루프를 완전히 종료
                                        2. continue 문: 현재 반복만 끝내고 다음 반복으로 즉시 넘어감.
                        
                -goto
                        모든 분기와 루프는 내부적으로 점프연산으로 구현됨.
                        jump(점프) 를 명시적으로 수행할 수 있음.

                        조언: goto는 절대로 사용하지 말 것. 프로그램의 구조를 무너뜨릴 수 있음.

[1.5 function(함수)]
        argument(인수)
                인수가 함수의 해당 매개변수로 전달되는 방식은 크게 두 가지이다.
                        1. 값 전달
                        2. 참조 전달
                
                function.cpp 참고바람.
                
                -값 전달
                        인수를 함수에 전달하면 인수의 복사본이 만들어짐 = 함수 안에서 인수가 변해도 밖에서는 그대로임.
                        이런 종류의 인수 전달 방식을 pass by value(값 전달) 또는 call by value(값 호출)이라고 부름.
                
                -참조 전달
                        매개변수를 수정했을 떄 인수가 실제로 수정되게 하려면 참조전달을 사용해야 함.
                                ex. void increment(int& x) {}
                        
                        주의: 연산의 중간 결과 같은 임시 객체는 참조로 전달 불가능
                        표현식을 함수에 전달하려면 먼저 표현식을 변수에 배정하고 그 변수를 전달해야 함.
                        단, 상수참조는 임시 객체의 전달을 허용함.
                                ex. increment(i + 9);           <-오류. 임시 객체는 참조 불가.
                                ex. alpha = two_norm(v + w);    <-v, w가 상수라면 참조 전달 가능함. 이거 해봤는데 왜 안되지....
                        
                        벡터나 행렬처럼 덩치 큰 자료 구조는 거의 항상 참조로 전달됨. 그러면 값비싼 복사 연산을 피할 수 있음.
                                ex. double two_norm(vector& v) {...}
                        
                        벡터를 참조로 전달하면 의도치 않게 벡터가 변경될 위험이 있음.
                        벡터의 변경을 방지하고 불필요한 복사 연산을 피하는 목적으로 흔히 다음처럼 상수 참조 또는 const참조를 사용함.
                                ex. double two_norm(const vector& v) {...}

                        
                값 전달, 상수 참조 둘다 인수의 변경을 방지하지만 내부 작동방식은 다름
                        값 전달: 값으로 전달된 인수는 복사본이여서 원래의 인수에는 아무런 영향이 없음
                        상수 참조: 함수가 전달된 인수를 실제로 사용하지만 인수에 변경을 가할 수 있는 모든 연산이 컴파일 시점에서 금지됨.
                 
                default argument(기본 인수)
                        인수에 어떤 특정한 값이 아주 흔히 쓰인다면, 그것을 기본값으로 선언함으로써 함수 호출 구문을 간결하게 만들 수 있음.
                        ex.     double root(double x, int degree = 2) {...}         <-인수 한 개 만으로도 호출 가능
                                x= root(3.5, 3);
                                y= root(7.0);           //root(7.0, 2)와 같다
                        
                        주의: 기본인수들은 반드시 매개변수 목록의 제일 끝에 있어야함.
        
        결과의 반환
                함수들은 특정한 형식의 값을 결과로 반환함.

                아무것도 돌려주지 않는 함수
                        void: 아무것도 돌려주지 않음을 명시하는 형식.

                        주의:   void는 실질적인 형식이 아니므로 void 형식의 객체 선언은 허용되지 않는다.
                                void 함수에서도 return문 사용이 가능하다. 단, 반환값 없이 return 키워드만 사용해야 한다.
                                ex. void heavy_compute(const vector& x, double eps, vector& y) {return;}
        
        inlining(인라인화)
                함수 호출을 함수에 담긴 연산들로 대체하는 것.
                함수를 호출하려면 레지스터들을 저장하고 인수들을 스택에 복사하는 사전 작업이 필요하다.
                이런 overhead(추가부담)을 피하기 위해 컴파일러는 함수 호출을 inlining(인라인화)한다.
                        ex. inline double square(double x) { return x*x; }
                
                주의:   컴파일러가 inline 요청을 반드시 받아들이는 것은 아니고
                        함수 정의에 inline이 없다고 해서 컴파일러가 인라인화를 적용하지 않는것도 아니다.
                
                inlining(인라인화)의 또다른 용도는 하나의 함수를 여러 번역 단위에 포함시키는 것이다. 이는 7.2.3.2에서 자세히 다룸.
        
        function overloading(함수 중복적재)
                이름이 같고 매개변수가 다른 함수를 여러개 정의하는 것.
                같은 이름의 함수를 여러개 정의 할 수 있다. 단, 매개 변수들이 충분히 달라야 한다.
                
                function.cpp 참고바람.
                
                [중복적재 해소 규칙]
                1. 주어진 인수 형식들과 정확히 일치하는 중복적재 버전이 있는가? 있다면 그것을 선택
                2. 없다면, 변환을 거친 후에 일치하는 버전이 있는가? 몇 개나 있는가?
                        -0: 오류. 주어진 인수와 부합하는 함수가 없음.
                        -1: 그 버전을 선택한다.
                        ->1: 오류. 중의적인(애매한) 호출

                function overloading 버전들은 반드시 signature(서명)이 달라야 한다.
                서명은 다음 요소들로 구성된다.
                        -함수 이름.
                        -매개변수 개수. 이를 arity(항수)라고 부른다.
                        -매개변수 형식들(그리고 매개변수들의 순서)
                주의:   서명에는 반환 형식이 포함되지 않는다.
                        반환 형식만 다른 함수를 다시 정의하는 것은 fuction overloading가 아니라 redefinition(재정의) 오류다.
                        매개변수의 이름만 다른 경우도 마찬가지다.
                                ex.     void f(int x) {}
                                        void f(int y) {}        //재정의: 매개변수 이름만 다름
                                        long f(int x) {}        //재정의: 반환 형식만 다름
                
                예외: 매개변수 형식의 이름이 같아도 참조 기호(&)가 붙으면 다른 형식으로 간주됨.
                        ex.     void f(int x) {}        // #1
                                void f(int& x) {}       // #2
                                void f(const int& x) {} // #3

                        주의: f를 다음과 같이 호출하면 문제가 발생함.
                                int       i= 3;
                                const int ci= 4;

                                f(i);   // #1과 #2에 동일하게 부합
                                f(ci);  // #1과 #3에 동일하게 부합
                                f(3);   // #1과 #3에 동일하게 부합

                                따라서 한 중복적재 버전의 매개변수가 참조 형식이라면 다른 버전의 해당 매개변수도 참조 형식으로 두는 것이 안전함.
                                지금 예에서는 #1을 제거하면 문제가 해결된다.
        
        main 함수
                main의 서명 2가지
                        -int main()
                        -int main(int argc, char* argv[])       <-int main(int argc, char** argv) 와 동일함.
                
                매개변수 argv에는 commandline argument(명령줄 인수)들이 들어 있고 argc에는 명령줄 인수들의 개수가 들어있다.
                argv[0]은 실행파일 이름이다.

                mainmain.cpp 참고바람.

[1.6 오류처리]
        C++에서 프로그램의 예기치 않은 행동을 처리하는 수단 두가지.
                1. assertion(단언) : 프로그래밍의 실수를 검출하기 위한 것
                2. exception(예외) : 프로그램이 더 이상 정상적으로 실행될 수 없을 정도의 어떤 예외적인 상황을 방지하기 위한 것.
        
        assertion(단언)
                <cassert>헤더의 assert 매크로: 주어진 표현식을 평가해 만일 결과가 false면 즉시 프로그램 종료
                프로그래밍 실수를 검출하는데 사용해야 함. assert매크로 호출을 단언문이라고 부름.
                        assertion.cpp 참고바람.

                <cassert>를 포함시키기 전에 NDEBUG 매크로를 정의하면 모든 단언문을 "꺼버릴" 수 있다.
                즉, 모든 단언문은 실행 파일에서 아무런 연산도 수행하지 않는다.
                        assertion.cpp 참고바람.
                
                조언: 방어적 프로그래밍. 프로그램의 속성들을 최대한 많이 테스트하라.
                        시스템이 우리가 가정한 것과 정확히 동일하게 행동하지 않을 떄가 종종 있으며, 컴파일러에 버그가 있을 수도 있다.
                        또는, 우리가 원래 의도한 것과는 조금 다르게 프로그램을 구현했을 수도 있다.
                        따라서 우리가 구현한 것들에서 어떤 속성(성질)이 반드시 성립함을 확신한다고 해도, 그 속성에 대한 단언문을 반드시 작성하자.
        
        exception(예외)
                방지할 수 없는 치명적인 상황들을 막기위해 문제가 발생시 예외를 발생시킬 수 있음.

                throw(예외 던지기)
                        exceptionthrow.cpp 참고바람
                        
                        좀더 큰 프로젝트라면 예외 형식들로 하나의 hierarchy(위계구조)를 구축해서 사용함
                        이런 경우 흔히 std::exception을 상속해서 예외 형식들을 만듦.
                
                catch(예외 잡기)
                        던져진 예외는 catch(잡아서) 처리해야 한다.
                        try 블록 안에서 예외가 발생하면("던져지면") 실행의 흐름은 그 예외와 호환되는 형식의 catch절로 점프함

                        클래스, 상속을 배우는 6.1.5에서 자세히 다룸.
                
                예외 처리
                        try와 catch를 이용.
                        이해불가... 좀더 공부해서 다시해보자...
                
                예외의 장점
                        1. 함수 인터페이스가 더 깔끔하다.
                        2. 오류 코드 대신 함수의 실행 결과를 직접 돌려주므로 중첩된 함수 호출이 가능하다.
                        3. 오류가 처리되지 않으면 즉시 프로그램의 실행이 종료되므로, 깨진 데이터로 소리없이 실행을 계속하다 더 큰 문제가 발생할 위험이 없다.
                        4. 예외는 호출 스택 위쪽으로 자동으로 전파된다.
                        5. 오류 코드를 명시적으로 주고받으려면 프로그램의 구조가 복잡해진다.

                누가 던지는가?
                        noexcept
                                ex. double square_root(double x) noexcept { ... }
                                square_root를 사용하는 프로그래머는 이 함수가 아무것도 던지지 않으리라는 가정하에서 코드를 작성할 수 있다.
                                noexcept로 선언된 함수가 약속을 어기고 예외를 던지면 프로그램이 종료된다.
                
        static assert(정적 단언)
                프로그램 오류를 컴파일 시점에서 미리 검출할 수 있음.
                static_assert가 위반되면 컴파일러는 컴파일을 중지하고 오류 메시지를 출력함.

                staticassert.cpp 참고바람.

[1.7 입출력]
        output(표준 출력)
                C++에서 표준출력에 접근하는 수단: cout
                <<를 이용해서 객체로 문자들을 보냄.
                <<와 같은 삽인 연산자는 비교, 논리, 비트 단위 연산자들보다 우선순위가 높음. 따라서 이런 연산을 사용하는 표현식은 괄호를 사용해야함.

                endl과 \n의 차이
                        endl은 버퍼를 완전히 flush(방출) 함.
                        \n은 버퍼를 flush(방출)하지 않음.

                        버퍼방출은 디버거 없이 프로그램의 출력들에 의존해서 디버깅할 때
                        출력들 사이의 어떤지점에서 프로그램이 충돌했는지 파악하는데 유용함.
                        단, 대량의 텍스트를 파일에 기록하는 경우 입출력 속도가 엄청 느려짐.
                
        input(표준 입력)
                표준입력은 입력 스트림 객체와 중복적재된 추출 연산자 >>로 처리함.
                일반적으로 표준입력 장치는 키보드. 이에 대응되는 표준 스트림 객체는 cin.
                        ex.     int age;
                                std::cin >> age;
                        입력장치로부터 문자들을 읽어서 주어진 변수 age의 형식인 int에 맞는 값으로 해석한 후 age에 넣는다.

                        input.cpp 참고바람

        file I/O(파일 입출력)
                다음은 파일에서 문자들을 읽어들이거나 문자들을 파일에 기록하는 작업을 위한 파일 스트림 클래스들이다.
                ofstream        파일에 쓴다
                ifstream        파일을 읽는다
                fstream         파일을 읽거나 쓴다

                io.cpp 참고바람
        
        일반적 스트림 개념
                스트림이 화면이나 키보드, 파일에만 국한된 것은 아니다.
                istream이나 ostream, iostream을 상속하고 그 클래스들의 멤버 함수들을 적절히 구현한 클래스라면
                어떤 것이라도 스트림이 될 수 있다.
                        ex.     Boost.Asio: TCP/IP를 위한 스트림을 제공함.
                                Boost.IOStream: 입출력 스트림들 대신 사용할 수 있는 스트림들을 제공함.
                
                ostream에 대한 가변 참조 형식의 매개변수를 이용하면, 모든 종류의 출력 스트림을 받아서 출력에 사용하는 함수를 만들 수 있다.
                        ostream.cpp 참고바람
        
        formatting(서식화)
                서식화: 사용자가 정의한 형식에 따라 화면에 출력되는 정보
                입출력 스트림의 formatting(서식화)에는 소위 입출력 I/O manipulator(조작자)라는 것이 쓰임.
                <iomanip>: 표준 입출력 조작자들이 있는 헤더.

                manipulator.cpp 참고바람.
        
        새로운 서식화 기능
                C의 printf의 단점
                        1. 사용자 정의 형식 사용 불가능
                        2. 형식에 안전하지 않음.
                
                새 서식화 기능의 장점
                        1. 간결함
                        2. 다양한 출력 순서에 맞게 정응시킬 수 있음.
                        3. 인수 형식이 맞지 않으면 예외가 발생하므로 형식에 안전하다.
                        4. 확장성이 있다.

                        내용이 너무 난해해서 다 안읽음....
        
        입출력 오류 처리
                기본적으로 스트림 객체는 예외를 던지지 않는다.
                        C++역사에서 스트림이 예외보다 먼저 등장했으며, 예외가 없던 시절에 작성된 코드와의 하위호환성 때문
                
                모든 것이 잘 진행되게 하려면 원칙적으로 모든 입출력 연산마다 오류 플래그를 점검해야 한다.

                ioexception.cpp 참고바람.
        
        file system(파일시스템)
                헤더 <filesystem>: 한 디렉터리의 모든 파일을 나열하고 그 파일 형식을 조회할 수 있음.

                filesystem.cpp 참고바람.

[배열, 포인터, 참조]
        array(배열)
                ex. int x[10];
                변수 x는 int형식의 요소 10개를 담을 수 있는 배열임.
                각 요소에 접근할 때는 x[i]로 접근한다. x[0]은 첫번째 요소, x[9]는 마지막 요소다.
                
                ex. float v[] = {1.0, 2.0, 3.0};
                선언과 함께 초기화할 수도 있다.

                배열에 대한 연산은 흔히 루프로 수행함.
                        ex.     float x[3];
                                for (int i = 0; i < 3 ; ++i)
                                        x[i] = v[i] - 3.0 * w[i];
                
                다차원 배열도 정의 가능
                        ex.     float   A[7][9];        <- a는 7x9행렬
                                int     q[3][2][3]      <- q는 3x2x3 배열
                
                C++은 배열에 대한 선형대수 연산들을 제공하지 않음. 또한 배열에 기초한 구현은 우아하지 않으며 오류의 여지가 많음.
                arrayvector.cpp 참고바람

                배열의 단점 두가지
                        1. 배열 접근 시 색인의 유효성이 점검되지 않는다.
                        실수로 배열 바깥의 메모리에 접근하게 되면 구획 위반 오류와 함께 프로그램이 충돌함. 데이터 깨짐
                                해결법: array` 형식으로 해결

                        2. 배열의 크기를 반드시 컴파일 시점에서 알아야 한다.
                        파일에서 데이터를 읽어서 배열에 채울 때 파일에 담긴 데이터 항목의 개수가 다를 수 있는 경우에는 배열 사용 불가능.
                                해결법: 동적 메모리 할당으로 해결
        pointer(포인터)
                포인터: 메모리 주소(adress)를 담은 변수
                
                동적 메모리 할당: 컴퓨터 프로그래밍에서 실행 시간동안 사용할 메모리 공간을 할당하는 것.
                        ex. int* y= new int[10]
                        동적 할당에서는 배열의 크기를 결정할 수 있다.

                        pointer.cpp 참고바람.

                        주의:   포인터를 잘못 다루면 허용 범위 밖의 데이터에 접근해서 프로그램이 충돌하거나 데이터가 소리 없이 깨질 수 있음.
                                또한 동적으로 할당한 배열의 크기는 프로그래머가 직접 관리해야 함.

                        배열을 다 사용하고 난 후 메모리를 해제하는 것도 프로그래머의 책임임. 해제할 때는 delet[] 연산자를 사용함.
                                ex. delete[] v;

                        함수의 배열 매개변수는 포인터와 호환가능.
                                arrayvector.cpp 참고바람
                                주의: 포인터로는 sizeof를 이용한 배열 크기 계산 불가능.
                        
                        배열과 포인터의 차이
                                배열:   크기가 n인 배열을 정의하면 n개의 요소를 담을 메모리 공간이 확보됨
                                포인터: 주소 하나를 담을 공간만 확보됨.
                
                포인터 용법
                        1. 데이터 항목 하나를 할당
                                메모리 할당: int* ip= new int;
                                메모리 해제: delete ip;
                                주의:   단일 객체 할당은 단일 객체 해제와 짝을 이뤄야하고, 배열 할당은 배열 해제와 짝을 이뤄야 함.
                                        안그러면 런타임 시스템이 메모리 해제를 제대로 처리하지 못해서 프로그램이 충돌하거나 데이터가 깨짐
                        
                        2. 기존의 객체가 차지한 메모리를 가리키게 하는 것.
                                int i= 3;
                                int* ip2= &i;
                                연산자 &: 주어진 객체의 메모리 주소를 돌려줌.
                                연산자 *: 주어진 주소가 가리키는 객체를 돌려줌. 역참조 연산
                                &과 *는 서로 반대
                        
                        3. 아무것도 가리키지 않게 하는 것.
                                int* ip3= nullptr;
                                int* ip4{};
                
                memory leak(메모리 누수)
                        ex.     int* y= new int[10]
                                y= new int[15];
                        int 10개를 담을 메모리 블록을 할당 후 다시 int 15개를 담을 메모리 블록을 할당함.
                        처음에 할당한 블록은 할당된 채로 남아 있지만, 주소가 없으므로 더 이상 접근 불가.
                        주소가 없으면 접근도 못하고 해제도 못함. 이 블록은 종료된 후 운영체제가 해제할 때까지 할당 상태로 남게됨.
                        고품질 과학 소프트웨어를 작성할 때는 메모리 누수를 허용하지 말아야 함.

                포인터 관련 오류를 최소화 하는 전략
                        1. 표준 라이브러리의 표준 컨테이너나 기타 검증된 라이브러리의 컨테이너를 사용함.
                                ex. std::vector와 같은 표준 라이브러리 사용
                        2. 동적 메모리 관리를 클래스로 encapsulation(캡슐화) 함.
                                메모리 관리 코드를 클래스당 한 번씩만 작성하면됨. 객체가 할당한 모든 메모리는 객체가 파괴될 때 함께 해제됨.
                        3. 스마트 포인터 사용.
                
                포인터의 용도
                        1. 객체 참조
                        2. 동적 메모리 관리
                
                원시 포인터의 단점: 포인터 자체만으로는 그 포인터가 기존의 객체를 가리키는지 아니면 동적으로 할당한 메모리 블록을 가리키는지 구분 불가능
                해결법: 스마트 포인터 사용.
        
        smart pointer(스마트 포인터)
                세가지 스마트 포인터가 있음.
                1. unique_ptr
                2. shared_ptr
                3. auto_ptr
                모든 스마트 포인터는 <memory>헤더에 정의되어 있음.

                unique_ptr(유일 포인터)
                        대상 객체에 대한 유일 소유권을 나타냄.
                        서로 다른 두 unique_ptr가 같은 객체를 가리키는 일이 없음.
                        원시 포인터와 차이점:    범위를 벗어날 때 해당 메모리가 자동으로 해제된다는 것.
                                                따라서 동적으로 할당하지 않은 주소로 unique_ptr를 초기화해서는 안됨.
                        
                        메모리의 유일 소유권을 보장하기 위해 복사를 허용하지 않음.
                        하지만 메모리 주소를 다른 unique_ptr에 넘겨주는 것은 가능함.

                
                기본기 부족으로 뭔소린지 이해가 안간다... 다른 책으로 공부하고 다시오자...
                

                
